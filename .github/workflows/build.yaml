name: Utoipa build

on:
  push:
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      run: |
        cargo test
        cargo test --test path_response_derive_test_no_serde_json --no-default-features
        cargo test --test component_derive_no_serde_json --no-default-features

  test-with-actix:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-actix
    
    - name: Run tests
      run: cargo test --features actix-web,actix_extras

  # draft-release:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - test
  #    - test-with-actix
  #  if: ${{ contains(github.ref, 'ci-tweaking') }}
  #  steps:
  #   - uses: ./.github/actions/gitlog
  #     name: Get changed commits
  #     id: gitlog

  #   - name: Get release info
  #     id: release_info
  #     run: |
  #       version=$(cargo read-manifest | jq -r .version)

  #       prerelease=false
  #       if [[ "$version" =~ .*-.* ]]; then
  #         prerelease=true
  #       fi
  #       echo "::set-output name=is_prerelease::$prerelease"
  #       echo "::set-output name=version::$version"

  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ steps.release_info.outputs.version }}
  #       release_name: Release ${{ steps.release_info.outputs.version }}
  #       body: | # TODO get the body from somewhere
  #         # Changes in this Release
  #         ${{ steps.gitlog.outputs.commits }}
  #       draft: true
  #       prerelease: ${{ steps.release_info.outputs.is_prerelease }}
